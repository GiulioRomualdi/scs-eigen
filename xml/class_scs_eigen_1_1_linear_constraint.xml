<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_scs_eigen_1_1_linear_constraint" kind="class" language="C++" prot="public">
    <compoundname>ScsEigen::LinearConstraint</compoundname>
    <basecompoundref refid="class_scs_eigen_1_1_constraint" prot="public" virt="non-virtual">ScsEigen::Constraint</basecompoundref>
    <includes refid="_linear_constraint_8h" local="no">LinearConstraint.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_scs_eigen_1_1_linear_constraint_1a83d269b97746f9002a05e48ffa860af5" prot="public" static="no">
        <type>Eigen::Array&lt; bool, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using ScsEigen::LinearConstraint::SparsityPattern =  Eigen::Array&lt;bool, Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>SparsityPattern</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="38" column="5" bodyfile="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_scs_eigen_1_1_linear_constraint_1a9b63c34f4fa8d365d1a62cd173508c08" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd ScsEigen::LinearConstraint::m_A</definition>
        <argsstring></argsstring>
        <name>m_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="41" column="21" bodyfile="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_scs_eigen_1_1_linear_constraint_1a6431fdf3695b8591d4cca9b677143eab" prot="private" static="no" mutable="no">
        <type>SparsityPattern</type>
        <definition>SparsityPattern ScsEigen::LinearConstraint::m_ASparsityPattern</definition>
        <argsstring></argsstring>
        <name>m_ASparsityPattern</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="42" column="21" bodyfile="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_scs_eigen_1_1_linear_constraint_1a89eed4a158166c14a9e1fa81f822320c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ScsEigen::LinearConstraint::LinearConstraint</definition>
        <argsstring>()=default</argsstring>
        <name>LinearConstraint</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you initialize the class with this constructor please remember to call the <ref refid="class_scs_eigen_1_1_linear_constraint_1ad8d8082608406466df7b7558efc94d56" kindref="member">LinearConstraint::setA()</ref> and <ref refid="class_scs_eigen_1_1_constraint_1a6abf0e54bc5d6debf923935ea74918d0" kindref="member">LinearConstraint::setBounds()</ref> methods before calling <ref refid="class_scs_eigen_1_1_solver_1a77f4aea8f4131a2ebb340a5777bebafd" kindref="member">Solver::solve()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="51" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_scs_eigen_1_1_linear_constraint_1a2f4e0082b2de2b64a0d5f5baf27ddd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ScsEigen::LinearConstraint::LinearConstraint</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;A, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lowerBound, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upperBound, std::optional&lt; Eigen::Ref&lt; const SparsityPattern &gt;&gt; sparsityPattern={})</argsstring>
        <name>LinearConstraint</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;</type>
          <declname>lowerBound</declname>
        </param>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;</type>
          <declname>upperBound</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const SparsityPattern &gt;&gt;</type>
          <declname>sparsityPattern</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>linear constraint matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the lower bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the upper bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparsityPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parameter containing the sparsity pattern of the matrix A. If not provided the sparsity pattern is automatically computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>In case of error an invalid <ref refid="class_scs_eigen_1_1_linear_constraint" kindref="compound">LinearConstraint</ref> will be build. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_scs_eigen_1_1_linear_constraint_1ad8d8082608406466df7b7558efc94d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ScsEigen::LinearConstraint::setA</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;A, std::optional&lt; Eigen::Ref&lt; const SparsityPattern &gt;&gt; sparsityPattern={})</argsstring>
        <name>setA</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const SparsityPattern &gt;&gt;</type>
          <declname>sparsityPattern</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Set the constraint matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>linear constraint matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparsityPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parameter containing the sparsity pattern of the matrix A. If not provided the sparsity pattern is automatically computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_scs_eigen_1_1_linear_constraint_1a80138657a6a8803fdefae0c2b63b060d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::MatrixXd&gt; ScsEigen::LinearConstraint::getA</definition>
        <argsstring>() const</argsstring>
        <name>getA</name>
        <briefdescription>
<para>Get the constraint matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the constraint matrix A. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="81" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_scs_eigen_1_1_linear_constraint_1af4a39522a7e0897959e3c23f7ea3ccbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const SparsityPattern &gt;</type>
        <definition>Eigen::Ref&lt;const SparsityPattern&gt; ScsEigen::LinearConstraint::getASparsityPattern</definition>
        <argsstring>() const</argsstring>
        <name>getASparsityPattern</name>
        <briefdescription>
<para>Get the sparsity pattern of the constraint matrix A,. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the sparsity pattern of A. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="87" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_scs_eigen_1_1_linear_constraint" kindref="compound">LinearConstraint</ref> is a concrete implementation of <ref refid="class_scs_eigen_1_1_constraint" kindref="compound">Constraint</ref>. It implements a constraint of the form. <formula id="2">\[ l \le A x \le u \]</formula> where <formula id="3">$x \in \mathbb{R}^n$</formula> is the optimization variable. The linear constraints are defined by matrix <formula id="4">$A \in \mathbb{R}^{m \times n}$</formula> and vectors <formula id="5">$l$</formula> and <formula id="6">$u$</formula> so that <formula id="7">$l_i \in \mathbb{R} \cup \{-\infty\}$</formula> and <formula id="8">$u_i \in \mathbb{R} \cup \{\infty\}$</formula> for all <formula id="9">$i \in \{1,...,m\}$</formula>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ScsEigen::LinearConstraint</label>
        <link refid="class_scs_eigen_1_1_linear_constraint"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ScsEigen::Constraint</label>
        <link refid="class_scs_eigen_1_1_constraint"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ScsEigen::LinearConstraint</label>
        <link refid="class_scs_eigen_1_1_linear_constraint"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ScsEigen::Constraint</label>
        <link refid="class_scs_eigen_1_1_constraint"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" line="36" column="1" bodyfile="/home/runner/work/scs-eigen/scs-eigen/src/ScsEigen/include/ScsEigen/LinearConstraint.h" bodystart="35" bodyend="88"/>
    <listofallmembers>
      <member refid="class_scs_eigen_1_1_constraint_1a3afcea63471f33b51f1c5fd699847450" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>Constraint</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a4eff2a5d67e203512d97ba14f834c3cc" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>Constraint</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a80138657a6a8803fdefae0c2b63b060d" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getA</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1af4a39522a7e0897959e3c23f7ea3ccbb" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getASparsityPattern</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1adad6357b9ef7336cd288b77374bb9f57" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getDescription</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a79b5a575b52f5443438c7449c0e32b4e" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getLowerBound</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a2ade7a7665aede297ee2e9fe76f0785d" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getNumberOfConstraints</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a612d47e6b3975322e8be687f1bd365ef" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getNumberOfVariables</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a869dab5651f45854bb782451a3b09fba" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>getUpperBound</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a89eed4a158166c14a9e1fa81f822320c" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>LinearConstraint</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a2f4e0082b2de2b64a0d5f5baf27ddd0f" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>LinearConstraint</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a9b63c34f4fa8d365d1a62cd173508c08" prot="private" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_A</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a6431fdf3695b8591d4cca9b677143eab" prot="private" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_ASparsityPattern</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1adc6fe54c2b1d0cabba8a635c10fe9f6e" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_description</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1aa37ead2d906c2bb29051f7398cde95bd" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_lowerBound</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1ac0352757812cfb0edd2b4932ddcb80b2" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_numberOfConstraints</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1ac4dea5e437ad52876c9aca9972cf9aff" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_numberOfVariables</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a1fbfe4874bb4acb3544679410b41019f" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>m_upperBound</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1ad8d8082608406466df7b7558efc94d56" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>setA</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a6abf0e54bc5d6debf923935ea74918d0" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>setBounds</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a8670822e57e2c03e496c7f2efb3027b3" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>setDescription</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a4d263e6c85fd45679e6a1a252ee6c8ce" prot="protected" virt="virtual"><scope>ScsEigen::LinearConstraint</scope><name>setLowerBound</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1ac8898e02e58e7678ce862032c7f4d430" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>setNumberOfConstraints</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1ac667af1a25af66015f973151eae25806" prot="protected" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>setNumberOfVariables</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a380eb0271203ca9885cf0740bf05ac99" prot="protected" virt="virtual"><scope>ScsEigen::LinearConstraint</scope><name>setUpperBound</name></member>
      <member refid="class_scs_eigen_1_1_linear_constraint_1a83d269b97746f9002a05e48ffa860af5" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>SparsityPattern</name></member>
      <member refid="class_scs_eigen_1_1_constraint_1a9defe57e0321444a0034f7f402260145" prot="public" virt="non-virtual"><scope>ScsEigen::LinearConstraint</scope><name>~Constraint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
