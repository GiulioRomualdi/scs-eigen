<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md_pages_qp" kind="page">
    <compoundname>md_pages_qp</compoundname>
    <title>Quadratic Programming problem</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><bold>scs-eigen</bold> can be used to solve Quadratic Programming (QP) problems n the for <formula id="22">\[ \begin{array}{rl} \text{minimize } &amp; \frac{1}{2} x^\top P x + q^\top x + r \\ \text{subject to } &amp; l \le A x \le u \end{array} \]</formula> where <formula id="3">$x \in \mathbb{R}^n$</formula> is the optimization variable. The objective function is defined by a positive semidefinite matrix <formula id="23">$P \in S^n_+$</formula> and vector <formula id="24">$q \in \mathbb{R}^n$</formula>. The linear constraints are defined by matrix <formula id="4">$A \in \mathbb{R}^{m \times n}$</formula> and vectors <formula id="5">$l$</formula> and <formula id="6">$u$</formula> so that <formula id="7">$l_i \in \mathbb{R} \cup \{-\infty\}$</formula> and <formula id="8">$u_i \in \mathbb{R} \cup \{\infty\}$</formula> for all <formula id="9">$i \in \{1,...,m\}$</formula>.</para>
<para>The following example shows how <bold>scs-eigen</bold> can be used to solve the QP problem:</para>
<para><formula id="25">\[ \begin{array}{rl} \text{minimize } &amp; \frac{1}{2} x^\top \begin{bmatrix} 3 &amp; 2 \\ 2 &amp; 4\end{bmatrix} x + \begin{bmatrix} 3 &amp; 1 \end{bmatrix} x \\ \text{subject to } &amp; \begin{bmatrix} 1 \\ 0 \\0 \end{bmatrix} \le \begin{bmatrix} 1 &amp; 1\\ 1 &amp; 0 \\0 &amp; 1 \end{bmatrix} x \le \begin{bmatrix} 1 \\ 0.7 \\0.7 \end{bmatrix} \end{array} \]</formula></para>
<para>First of all you should include <ref refid="namespace_scs_eigen" kindref="compound">ScsEigen</ref></para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;ScsEigen/ScsEigen.h&gt;</highlight></codeline>
</programlisting></para>
<para>You can also define the Hessian, gradient the constraint matrix and vectors.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Eigen::Matrix2d<sp/>H;</highlight></codeline>
<codeline><highlight class="normal">H<sp/>&lt;&lt;<sp/>3,<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>2,<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">Eigen::Vector2d<sp/>gradient;</highlight></codeline>
<codeline><highlight class="normal">gradient<sp/>&lt;&lt;<sp/>3,<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eigen::MatrixXd<sp/>A(3,2);</highlight></codeline>
<codeline><highlight class="normal">A.setZero();</highlight></codeline>
<codeline><highlight class="normal">A(0,0)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">A(0,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">A(1,0)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">A(2,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eigen::Vector3d<sp/>lowerBound;</highlight></codeline>
<codeline><highlight class="normal">lowerBound<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eigen::Vector3d<sp/>upperBound;</highlight></codeline>
<codeline><highlight class="normal">upperBound<sp/>&lt;&lt;<sp/>1,<sp/>0.7,<sp/>0.7;</highlight></codeline>
</programlisting></para>
<para>Once the matrices used to described the QP problem has been defined you can create <computeroutput>ScsEigen::Solve</computeroutput> and initialize the number of variables.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_scs_eigen_1_1_solver" kindref="compound">ScsEigen::Solver</ref><sp/>solver;</highlight></codeline>
<codeline><highlight class="normal">solver.setNumberOfVariabels(2);</highlight></codeline>
</programlisting></para>
<para>Now you can set the constraints and the cost using <computeroutput><ref refid="class_scs_eigen_1_1_mathematical_program" kindref="compound">ScsEigen::MathematicalProgram</ref></computeroutput> class</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">solver.<ref refid="class_scs_eigen_1_1_solver_1a00d3a52b9f6700bfd5bb924ceac479b2" kindref="member">mathematicalProgram</ref>().<ref refid="class_scs_eigen_1_1_mathematical_program_1ac5f5b786fc6caa14cfb47f5b690ac27a" kindref="member">addLinearConstraint</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ScsEigen::LinearConstraint&gt;(A,<sp/>lowerBound,<sp/>upperBound),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linear<sp/>constraint&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">solver.<ref refid="class_scs_eigen_1_1_solver_1a00d3a52b9f6700bfd5bb924ceac479b2" kindref="member">mathematicalProgram</ref>().<ref refid="class_scs_eigen_1_1_mathematical_program_1a9248c4f32d5aeae9cafdc8b932f315c4" kindref="member">addQuadraticCost</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ScsEigen::QuadraticCost&gt;(H,<sp/>gradient),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadratic<sp/>cost&quot;</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para>
<para>You can finally solve the problem and get the solution <programlisting filename=".cpp"><codeline><highlight class="normal">solver.<ref refid="class_scs_eigen_1_1_solver_1a77f4aea8f4131a2ebb340a5777bebafd" kindref="member">solve</ref>();</highlight></codeline>
<codeline><highlight class="normal">Eigen::Vector2d<sp/>solution<sp/>=<sp/>solver.<ref refid="class_scs_eigen_1_1_solver_1a795031c498a9bccce8f6cc1515d8190e" kindref="member">solution</ref>().<ref refid="struct_scs_eigen_1_1_solution_1a67d826aa13fb6381c33667da932e7f3c" kindref="member">solution</ref>;</highlight></codeline>
</programlisting></para>
<para>The complete example follows</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">###<sp/>CMakeLists.txt</highlight></codeline>
<codeline><highlight class="normal">project(QP)</highlight></codeline>
<codeline><highlight class="normal">find_package(ScsEigen<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">add_executable(QP<sp/>qp.cpp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(QP<sp/>ScsEigen::ScsEigen)</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ScsEigen/ScsEigen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix2d<sp/>H;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>&lt;&lt;<sp/>3,<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>gradient;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;<sp/>3,<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Eigen::MatrixXd<sp/>A(3,2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A.setZero();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A(0,0)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A(0,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A(1,0)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A(2,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>lowerBound;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lowerBound<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>upperBound;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upperBound<sp/>&lt;&lt;<sp/>1,<sp/>0.7,<sp/>0.7;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_scs_eigen_1_1_solver" kindref="compound">ScsEigen::Solver</ref><sp/>solver;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>solver.<ref refid="class_scs_eigen_1_1_solver_1a00d3a52b9f6700bfd5bb924ceac479b2" kindref="member">mathematicalProgram</ref>().setNumberOVfariables(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!solver.<ref refid="class_scs_eigen_1_1_solver_1a00d3a52b9f6700bfd5bb924ceac479b2" kindref="member">mathematicalProgram</ref>().<ref refid="class_scs_eigen_1_1_mathematical_program_1a9248c4f32d5aeae9cafdc8b932f315c4" kindref="member">addQuadraticCost</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ScsEigen::QuadraticCost&gt;(H,<sp/>gradient),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadratic<sp/>cost&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!solver.<ref refid="class_scs_eigen_1_1_solver_1a00d3a52b9f6700bfd5bb924ceac479b2" kindref="member">mathematicalProgram</ref>().<ref refid="class_scs_eigen_1_1_mathematical_program_1ac5f5b786fc6caa14cfb47f5b690ac27a" kindref="member">addLinearConstraint</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ScsEigen::LinearConstraint&gt;(A,<sp/>lowerBound,<sp/>upperBound),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linear<sp/>constraint&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!solver.<ref refid="class_scs_eigen_1_1_solver_1a77f4aea8f4131a2ebb340a5777bebafd" kindref="member">solve</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!solver.<ref refid="class_scs_eigen_1_1_solver_1a795031c498a9bccce8f6cc1515d8190e" kindref="member">solution</ref>().<ref refid="struct_scs_eigen_1_1_solution_1a7801544c71d1e3f54b08ec1e04bb6440" kindref="member">isValid</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solver.<ref refid="class_scs_eigen_1_1_solver_1a795031c498a9bccce8f6cc1515d8190e" kindref="member">solution</ref>().<ref refid="struct_scs_eigen_1_1_solution_1a0ea5eacd27af3d5869ca9fc028e3ec2c" kindref="member">status</ref><sp/>!=<sp/>ScsEigen::Solution::Status::solved)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>solution<sp/>=<sp/>solver.<ref refid="class_scs_eigen_1_1_solver_1a795031c498a9bccce8f6cc1515d8190e" kindref="member">solution</ref>().<ref refid="struct_scs_eigen_1_1_solution_1a67d826aa13fb6381c33667da932e7f3c" kindref="member">solution</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
